{
  // Place your snippets for python here.
  "app-name": {
    "prefix": "app-name",
    "body": [
      "from os.path import basename",
      "APP_NAME = basename(__file__).split(\".\")[0]"
    ],
    "description": "Add line to retrieve file name without extension"
  },
  "aws-lambda-handler": {
    "prefix": "aws-lambda-handler",
    "body": [
      "def respond(message, status_code=200):",
      "    import logging",
      "    logging.info(message)",
      "    resp = {",
      "        \"text\": message,",
      "    }",
      "    return {",
      "        \"body\": json.dumps(resp),",
      "        \"headers\": {",
      "            \"Content-Type\": \"application/json\",",
      "        },",
      "        \"statusCode\": status_code,",
      "    }",
      "",
      "",
      "def lambda_handler(event, context):",
      "    pass"
    ],
    "description": "Add lambda handler"
  },
  "aws-profiles-from-credentials-file": {
    "prefix": "aws-profiles-from-credentials-file",
    "body": [
      "def read_aws_profile_names():",
      "    from configparser import ConfigParser",
      "    from os.path import expanduser, join",
      "    try:",
      "        cp = ConfigParser()",
      "        cp.read(join(expanduser(\"~\"), \".aws\", \"credentials\"))",
      "        return cp.sections()",
      "     except Exception as e:",
      "        logging.error(e)"
    ],
    "description": "Add function retrieving profiles from ~/.aws/credentials"
  },
  "boto3-import-n-logger": {
    "prefix": "boto3-import-n-logger",
    "body": [
      "from boto3.session import Session",
      "import boto3",
      "import logging",
      "",
      "logging.getLogger().setLevel(logging.DEBUG)",
      "logging.getLogger(\"botocore\").setLevel(logging.CRITICAL)",
      "logging.getLogger(\"boto3\").setLevel(logging.CRITICAL)",
      "logging.getLogger(\"urllib3.connectionpool\").setLevel(logging.CRITICAL)",
      "#urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)",
      "logging.info(f\"boto3.__version__: {boto3.__version__}\")"
    ],
    "description": "Add boto3 imports and set logger"
  },
  "boto3-paginate": {
    "prefix": "boto3-paginate",
    "body": [
      "params = {}",
      "for page in client.get_paginator(\"todo\").paginate(**params).result_key_iters():",
      "    for item in page:",
      "        print(item)"
    ],
    "description": "Add boto3 paginator code"
  },
  "boto3-session": {
    "prefix": "boto3-session",
    "body": [
      "from boto3.session import Session",
      "session = Session(profile_name=profile_name)",
      "this_identity = session.client(\"sts\").get_caller_identity()"
    ],
    "description": "Add boto3 session"
  },
  "botocore-exceptions-clienterror": {
    "prefix": "botocore-exceptions-clienterror",
    "body": [
      "from botocore.exceptions import ClientError",
      "",
      "try:",
      "    pass",
      "except ClientError as e:",
      "    print(e.response[\"Error\"][\"Code\"])",
      "    if e.response[\"Error\"][\"Code\"] in [\"TODO\"]:",
      "        pass",
    ],
    "description": "Add botocore.exceptions.ClientError"
  },

  "click-command-main": {
    "prefix": "click-command-main",
    "body": [
      "@click.command(help=\"TODO\")",
      "@click.option(\"--profile\", \"-p\", default=\"default\", show_default=True, help=\"AWS profile name\")",
      "@click.option(\"--region\", \"-r\", default=\"ap-southeast-2\", show_default=True, help=\"AWS Region; use `all` for all regions\")",
      "def main(profile, region):",
      "    pass",
      "",
      "",
      "if __name__ == \"__main__\":",
      "     main()",
      ""
    ],
    "description": "Add main function"
  },
  "click-group": {
    "prefix": "click-group",
    "body": [
      "@click.group(invoke_without_command=True, help=\"TODO Help 1\")",
      "@click.pass_context",
      "def main_cli(ctx):",
      "    if ctx.invoked_subcommand is not None:",
      "        return",
      "    click.echo(\"I was invoked without subcommand\")",
      "",
      "",
      "@main_cli.command(help=\"TODO cmd1\")",
      "@click.argument(\"var1\", type=click.STRING)",
      "@click.pass_context",
      "def cmd1(ctx, var1):",
      "    ctx.ensure_object(dict)",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    main_cli(obj={\"debug\": \"true\"})"
    ],
    "description": "Add click option"
  },
  "click-argument": {
    "prefix": "click-argument",
    "body": [
      "@click.argument(\"filename\", nargs=-1)  # -1 for unlimited number of arguments",
    ],
    "description": "Add click argument"
  },
  "click-option": {
    "prefix": "click-option",
    "body": [
      "@click.option(\"--todo\", \"-t\", default=\"default\", show_default=True, help=\"TODO\")",
    ],
    "description": "Add click option"
  },
  "click-option-boolean": {
    "prefix": "click-option-boolean",
    "body": [
      "@click.option(\"--todo\", \"-t\", is_flag=True, show_default=True, help=\"TODO\")",
    ],
    "description": "Add click boolean option"
  },
  "click-option-choice": {
    "prefix": "click-option-choice",
    "body": [
      "@click.option(\"--todo\", type=click.Choice([\"todo1\", \"todo2SHA1\"], case_sensitive=False))",
    ],
    "description": "Add click choice option"
  },
  "io-make-dir": {
    "prefix": "io-make-dir",
    "body": [
      "from os import makedirs",
      "",
      "# Create directory if not exists",
      "create_dir = lambda d: makedirs(d, 0o755, exist_ok=True)"
    ],
    "description": "Create directory if not exists"
  },
  "io-csv-read": {
    "prefix": "io-csv-read",
    "body": [
      "import csv",
      "",
      "def read_csv_file(filename):",
      "    with open(filename) as f:",
      "        reader = csv.reader(f)",
      "        return [list(map(str.strip, row)) for row in reader if row and not row[0].startswith(\"#\")]"
    ],
    "description": "Read csv file"
  },
  "io-csv-write": {
    "prefix": "io-csv-write",
    "body": [
      "import csv",
      "",
      "def write_csv_file(filename, items, delimiter=\",\"):",
      "    # items: list of list",
      "    with open(filename, \"w\") as f:",
      "        for data in items:",
      "            f.write(f\"{delimiter.join(list(map(str, data)))}\\n\")"
    ],
    "description": "Write csv file"
  },
  "io-json-read": {
    "prefix": "io-json-read",
    "body": [
      "import json",
      "",
      "def read_json_file(filename):",
      "    with open(filename) as f:",
      "        return json.load(f)"
    ],
    "description": "Read json file"
  },
  "io-json-write": {
    "prefix": "io-json-write",
    "body": [
      "import json",
      "",
      "def write_json_file(filename, data, indent=0, sort_keys=True):",
      "    with open(filename, \"w\") as f:",
      "        return json.dump(data, f, indent=indent, sort_keys=sort_keys)"
    ],
    "description": "Write json file"
  },
  "io-txt-read-all": {
    "prefix": "io-txt-read-all",
    "body": [
      "def read_file(filename):",
      "    with open(filename) as f:",
      "        return f.readlines()"
    ],
    "description": "Read whole content in txt file"
  },
  "io-txt-read-lines": {
    "prefix": "io-txt-read-lines",
    "body": [
      "def readlines_txt_file(filename):",
      "    with open(filename) as f:",
      "        # ignore empty/commented line",
      "        lns = f.readlines()",
      "        return [x.strip() for x in lns if x.strip() and not x.strip().startswith(\"#\")]"
    ],
    "description": "Read lines from txt file"
  },
  "main-with-no-argument": {
    "prefix": "main-with-no-argument",
    "body": [
      "def main():",
      "    pass",
      "",
      "",
      "if __name__ == \"__main__\":",
      "     main()",
      ""
    ],
    "description": "Add main function with no argument"
  },
  "yaml-dump-dict": {
    "prefix": "yaml-dump-dict",
    "body": [
      "import yaml",
      "data_yaml = yamp.dump(data_dict))"
    ],
    "description": "Add yaml.dump line"
  }
}